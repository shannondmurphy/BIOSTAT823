{
  
    
        "post0": {
            "title": " Deep learning classification of bugs ",
            "content": "",
            "url": "https://smurphy567.github.io/BIOSTAT823/2021/09/12/hw5.html",
            "relUrl": "/2021/09/12/hw5.html",
            "date": " • Sep 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Dashboard Visualization of Science and Engineering PhDs awarded in the US",
            "content": "",
            "url": "https://smurphy567.github.io/BIOSTAT823/2021/09/11/hw4.html",
            "relUrl": "/2021/09/11/hw4.html",
            "date": " • Sep 11, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Malaria Data Visualizations",
            "content": "Create 3 informative visualizations about malaria using Python in a Jupyter notebook, starting with the data sets at https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-11-13. Where appropriate, make the visualizations interactive. . Note There are many libraries you can use for each task. Choose one library and explain why you chose it in your blog. . incidence-of-malaria.csv . children-sleeping-under-treated-bednet.csv . import pandas as pd import seaborn as sns . incidence = pd.read_csv(&#39;incidence-of-malaria.csv&#39;) bednet = pd.read_csv(&#39;children-sleeping-under-treated-bednet.csv&#39;) . incidence = incidence.rename(columns = {&quot;Incidence of malaria (per 1,000 population at risk)&quot;:&quot;Inc&quot;}) incidence = incidence[[&#39;Entity&#39;, &#39;Year&#39;, &#39;Inc&#39;]] print(incidence.head(10)) . Entity Year Inc 0 Afghanistan 2000 95.542797 1 Afghanistan 2001 91.885775 2 Afghanistan 2002 104.012541 3 Afghanistan 2003 68.409123 4 Afghanistan 2004 37.637712 5 Afghanistan 2005 27.079106 6 Afghanistan 2006 20.526101 7 Afghanistan 2007 21.548933 8 Afghanistan 2008 17.836232 9 Afghanistan 2009 14.771710 . &quot;Six countries accounted for more than half of all malaria cases worldwide: Nigeria (25%), the Democratic Republic of the Congo (12%), Uganda (5%), and Côte d’Ivoire, Mozambique and Niger (4% each)&quot; https://www.who.int/news-room/feature-stories/detail/world-malaria-report-2019 . top6 = ( pd.concat( [incidence[incidence.Entity == &quot;Nigeria&quot;], incidence[incidence.Entity == &quot;Democratic Republic of Congo&quot;], incidence[incidence.Entity == &quot;Uganda&quot;], incidence[incidence.Entity == &quot;Cote d&#39;Ivoire&quot;], incidence[incidence.Entity == &quot;Mozambique&quot;], incidence[incidence.Entity == &quot;Niger&quot;]] ) ) . import numpy as np from bokeh.plotting import figure, show from bokeh.io import output_notebook from bokeh.models import HoverTool . output_notebook() . Loading BokehJS ... hover = HoverTool(tooltips = [(&quot;Country&quot;, &quot;@Entity&quot;), (&quot;Year&quot;,&quot;@Year&quot;), (&quot;Incidence&quot;, &quot;@Inc&quot;)]) fig1 = figure(title = &quot;Malaria Incidence&quot;, x_axis_label = &#39;Year&#39;, y_axis_label = &#39;Incidence per 1,000 at risk&#39;, tools = [hover]) fig1.line(source = top6[top6.Entity == &quot;Nigeria&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;red&#39;, legend_label = &#39;Nigeria&#39;) fig1.scatter(source = top6[top6.Entity == &quot;Nigeria&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;red&#39;, legend_label = &#39;Nigeria&#39;) fig1.line(source = top6[top6.Entity == &quot;Democratic Republic of Congo&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;black&#39;, legend_label = &#39;Democratic Republic of Congo&#39;) fig1.scatter(source = top6[top6.Entity == &quot;Democratic Republic of Congo&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;black&#39;, legend_label = &#39;Democratic Republic of Congo&#39;) fig1.line(source = top6[top6.Entity == &quot;Uganda&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;blue&#39;, legend_label = &#39;Uganda&#39;) fig1.scatter(source = top6[top6.Entity == &quot;Uganda&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;blue&#39;, legend_label = &#39;Uganda&#39;) fig1.line(source = top6[top6.Entity == &quot;Cote d&#39;Ivoire&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;green&#39;, legend_label = &quot;Cote d&#39;Ivoire&quot;) fig1.scatter(source = top6[top6.Entity == &quot;Cote d&#39;Ivoire&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;green&#39;, legend_label = &quot;Cote d&#39;Ivoire&quot;) fig1.line(source = top6[top6.Entity == &quot;Mozambique&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;orange&#39;, legend_label = &#39;Mozambique&#39;) fig1.scatter(source = top6[top6.Entity == &quot;Mozambique&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;orange&#39;, legend_label = &#39;Mozambique&#39;) fig1.line(source = top6[top6.Entity == &quot;Niger&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;darkgrey&#39;, legend_label = &#39;Niger&#39;) fig1.scatter(source = top6[top6.Entity == &quot;Niger&quot;], x = &#39;Year&#39;, y = &#39;Inc&#39; , color = &#39;darkgrey&#39;, legend_label = &#39;Niger&#39;) fig1.legend.location = &quot;bottom_left&quot; . show(fig1) . from bokeh.models import CustomJS, Dropdown entities = list(incidence[&quot;Entity&quot;].unique()) drop = Dropdown(label = &quot;Geographic Location&quot;, menu = entities) show(drop) . from bokeh.models.widgets import CheckboxGroup boxes = CheckboxGroup(labels = entities, active = [0,1]) #show(boxes) . bednet = bednet.rename(columns = {&quot;Use of insecticide-treated bed nets (% of under-5 population)&quot;:&quot;Nets&quot;}) . top6_nets = ( pd.concat( [bednet[bednet.Entity == &quot;Nigeria&quot;], bednet[bednet.Entity == &quot;Democratic Republic of Congo&quot;], bednet[bednet.Entity == &quot;Uganda&quot;], bednet[bednet.Entity == &quot;Cote d&#39;Ivoire&quot;], bednet[bednet.Entity == &quot;Mozambique&quot;], bednet[bednet.Entity == &quot;Niger&quot;]] ) ) top6_nets = top6_nets[top6_nets.Year &lt; 2019] . hover_net = HoverTool(tooltips = [(&quot;Country&quot;, &quot;@Entity&quot;), (&quot;Year&quot;,&quot;@Year&quot;), (&quot;Net Percent&quot;, &quot;@Nets&quot;)]) fig2 = figure(title = &quot;Use of Insecticide-Treated Bed Nets&quot;, x_axis_label = &#39;Year&#39;, y_axis_label = &#39;Percent of Under-5 Population&#39;, tools = [hover_net]) fig2.line(source = top6_nets[top6_nets.Entity == &quot;Nigeria&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;red&#39;, legend_label = &#39;Nigeria&#39;) fig2.scatter(source = top6_nets[top6_nets.Entity == &quot;Nigeria&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;red&#39;, legend_label = &#39;Nigeria&#39;) fig2.line(source = top6_nets[top6_nets.Entity == &quot;Democratic Republic of Congo&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;black&#39;, legend_label = &#39;Democratic Republic of Congo&#39;) fig2.scatter(source = top6_nets[top6_nets.Entity == &quot;Democratic Republic of Congo&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;black&#39;, legend_label = &#39;Democratic Republic of Congo&#39;) fig2.line(source = top6_nets[top6_nets.Entity == &quot;Uganda&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;blue&#39;, legend_label = &#39;Uganda&#39;) fig2.scatter(source = top6_nets[top6_nets.Entity == &quot;Uganda&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;blue&#39;, legend_label = &#39;Uganda&#39;) fig2.line(source = top6_nets[top6_nets.Entity == &quot;Cote d&#39;Ivoire&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;green&#39;, legend_label = &quot;Cote d&#39;Ivoire&quot;) fig2.scatter(source = top6_nets[top6_nets.Entity == &quot;Cote d&#39;Ivoire&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;green&#39;, legend_label = &quot;Cote d&#39;Ivoire&quot;) fig2.line(source = top6_nets[top6_nets.Entity == &quot;Mozambique&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;orange&#39;, legend_label = &#39;Mozambique&#39;) fig2.scatter(source = top6_nets[top6_nets.Entity == &quot;Mozambique&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;orange&#39;, legend_label = &#39;Mozambique&#39;) fig2.line(source = top6_nets[top6_nets.Entity == &quot;Niger&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;darkgrey&#39;, legend_label = &#39;Niger&#39;) fig2.scatter(source = top6_nets[top6_nets.Entity == &quot;Niger&quot;], x = &#39;Year&#39;, y = &#39;Nets&#39; , color = &#39;darkgrey&#39;, legend_label = &#39;Niger&#39;) fig2.legend.location = &quot;top_left&quot; . show(fig2) . merged = pd.merge(top6, top6_nets, how = &#39;inner&#39;, on = [&#39;Entity&#39;, &#39;Year&#39;]) merged . Entity Year Inc Code Nets . 0 Nigeria | 2003 | 409.157078 | NGA | 1.2 | . 1 Nigeria | 2008 | 424.655344 | NGA | 5.5 | . 2 Nigeria | 2010 | 398.902620 | NGA | 28.9 | . 3 Nigeria | 2011 | 372.557183 | NGA | 16.4 | . 4 Nigeria | 2013 | 328.654579 | NGA | 16.6 | . 5 Nigeria | 2014 | 314.404862 | NGA | 25.4 | . 6 Nigeria | 2015 | 296.081400 | NGA | 43.6 | . 7 Nigeria | 2017 | 283.064074 | NGA | 49.1 | . 8 Nigeria | 2018 | 291.942514 | NGA | 52.2 | . 9 Democratic Republic of Congo | 2001 | 473.607811 | COD | 1.0 | . 10 Democratic Republic of Congo | 2007 | 481.926743 | COD | 5.8 | . 11 Democratic Republic of Congo | 2010 | 428.307772 | COD | 38.1 | . 12 Democratic Republic of Congo | 2014 | 308.386348 | COD | 55.8 | . 13 Democratic Republic of Congo | 2018 | 319.841016 | COD | 51.0 | . 14 Uganda | 2006 | 377.713926 | UGA | 9.7 | . 15 Uganda | 2009 | 433.791581 | UGA | 32.8 | . 16 Uganda | 2011 | 385.703317 | UGA | 42.8 | . 17 Uganda | 2015 | 236.112138 | UGA | 74.3 | . 18 Uganda | 2016 | 304.412125 | UGA | 62.0 | . 19 Uganda | 2018 | 289.184576 | UGA | 60.3 | . 20 Cote d&#39;Ivoire | 2000 | 514.615313 | CIV | 1.0 | . 21 Cote d&#39;Ivoire | 2004 | 518.674307 | CIV | 4.0 | . 22 Cote d&#39;Ivoire | 2005 | 510.039248 | CIV | 1.3 | . 23 Cote d&#39;Ivoire | 2006 | 506.567772 | CIV | 3.0 | . 24 Cote d&#39;Ivoire | 2012 | 396.275514 | CIV | 37.2 | . 25 Cote d&#39;Ivoire | 2016 | 354.656096 | CIV | 59.7 | . 26 Mozambique | 2007 | 399.447173 | MOZ | 7.0 | . 27 Mozambique | 2008 | 399.791243 | MOZ | 22.8 | . 28 Mozambique | 2011 | 389.921571 | MOZ | 35.7 | . 29 Mozambique | 2015 | 355.875440 | MOZ | 47.9 | . 30 Mozambique | 2018 | 305.358735 | MOZ | 72.7 | . 31 Niger | 2000 | 317.296531 | NER | 1.0 | . 32 Niger | 2006 | 370.732713 | NER | 7.4 | . 33 Niger | 2009 | 419.103964 | NER | 43.0 | . 34 Niger | 2010 | 425.637534 | NER | 63.7 | . 35 Niger | 2012 | 430.508290 | NER | 20.1 | . 36 Niger | 2015 | 369.829849 | NER | 95.5 | . hover3 = HoverTool(tooltips = [(&quot;Country&quot;, &quot;@Entity&quot;), (&quot;Year&quot;,&quot;@Year&quot;), (&quot;Net Percent&quot;, &quot;@Nets&quot;), (&quot;Incidence&quot;, &quot;@Inc&quot;)]) fig3 = figure(title = &quot;Ratio&quot;, x_axis_label = &#39;Percent of Under-5 Population Using Insecticide-Treated Bed Nets&#39;, y_axis_label = &#39;Malaria Incidence per 1,000 at risk&#39;, tools = [hover3]) fig3.scatter(source = merged[merged.Entity == &quot;Nigeria&quot;], x = &#39;Nets&#39;, y = &#39;Inc&#39; , color = &#39;red&#39;, legend_label = &#39;Nigeria&#39;, size = 15) fig3.scatter(source = merged[merged.Entity == &quot;Democratic Republic of Congo&quot;], x = &#39;Nets&#39;, y = &#39;Inc&#39; , color = &#39;black&#39;, legend_label = &#39;Democratic Republic of Congo&#39;, size = 15) fig3.scatter(source = merged[merged.Entity == &quot;Uganda&quot;], x = &#39;Nets&#39;, y = &#39;Inc&#39; , color = &#39;blue&#39;, legend_label = &#39;Uganda&#39;, size = 15) fig3.scatter(source = merged[merged.Entity == &quot;Cote d&#39;Ivoire&quot;], x = &#39;Nets&#39;, y = &#39;Inc&#39; , color = &#39;green&#39;, legend_label = &quot;Cote d&#39;Ivoire&quot;, size = 15) fig3.scatter(source = merged[merged.Entity == &quot;Mozambique&quot;], x = &#39;Nets&#39;, y = &#39;Inc&#39; , color = &#39;orange&#39;, legend_label = &#39;Mozambique&#39;, size = 15) fig3.scatter(source = merged[merged.Entity == &quot;Niger&quot;], x = &#39;Nets&#39;, y = &#39;Inc&#39; , color = &#39;darkgrey&#39;, legend_label = &#39;Niger&#39;, size = 15) . GlyphRenderer(id&nbsp;=&nbsp;&#39;41384&#39;, &hellip;)data_source&nbsp;=&nbsp;ColumnDataSource(id=&#39;41380&#39;, ...),glyph&nbsp;=&nbsp;Scatter(id=&#39;41382&#39;, ...),hover_glyph&nbsp;=&nbsp;None,js_event_callbacks&nbsp;=&nbsp;{},js_property_callbacks&nbsp;=&nbsp;{},level&nbsp;=&nbsp;&#39;glyph&#39;,muted&nbsp;=&nbsp;False,muted_glyph&nbsp;=&nbsp;None,name&nbsp;=&nbsp;None,nonselection_glyph&nbsp;=&nbsp;Scatter(id=&#39;41383&#39;, ...),selection_glyph&nbsp;=&nbsp;None,subscribed_events&nbsp;=&nbsp;[],tags&nbsp;=&nbsp;[],view&nbsp;=&nbsp;CDSView(id=&#39;41385&#39;, ...),visible&nbsp;=&nbsp;True,x_range_name&nbsp;=&nbsp;&#39;default&#39;,y_range_name&nbsp;=&nbsp;&#39;default&#39;) import pylab import numpy as np . Poly = np.polynomial.Polynomial . nmin, nmax = min(merged[&#39;Nets&#39;]), max(merged[&#39;Nets&#39;]) . nigeria = merged[merged.Entity == &quot;Nigeria&quot;] fit, info = Poly.fit(nigeria[&#39;Nets&#39;], nigeria[&#39;Inc&#39;], 1) . fig3.line(nigeria[&#39;Nets&#39;], fit) . show(fig3) . deaths = pd.read_csv(&#39;malaria-deaths-by-region.csv&#39;) deaths = deaths.rename(columns = {&quot;Deaths - Malaria - Sex: Both - Age: All Ages (Number)&quot;: &quot;Deaths&quot;}) deaths.sample(5) . Entity Code Year Deaths . 5111 Slovenia | SVN | 2005 | 0.000000 | . 3001 Kenya | KEN | 1995 | 15386.951014 | . 3221 Lesotho | LSO | 1991 | 0.000000 | . 5238 South Korea | KOR | 1992 | 11.153381 | . 2640 Hungary | HUN | 1998 | 0.000000 | . from geopy.geocoders import Nominatim import time from pprint import pprint app = Nominatim(user_agent=&quot;tutorial&quot;) # get location raw data location = app.geocode(&quot;Afghanistan&quot;).raw # print raw data pprint(location) . {&#39;boundingbox&#39;: [&#39;29.3772&#39;, &#39;38.4910682&#39;, &#39;60.5176034&#39;, &#39;74.889862&#39;], &#39;class&#39;: &#39;boundary&#39;, &#39;display_name&#39;: &#39;افغانستان&#39;, &#39;icon&#39;: &#39;https://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png&#39;, &#39;importance&#39;: 0.7470274828373141, &#39;lat&#39;: &#39;33.7680065&#39;, &#39;licence&#39;: &#39;Data © OpenStreetMap contributors, ODbL 1.0. &#39; &#39;https://osm.org/copyright&#39;, &#39;lon&#39;: &#39;66.2385139&#39;, &#39;osm_id&#39;: 303427, &#39;osm_type&#39;: &#39;relation&#39;, &#39;place_id&#39;: 258408076, &#39;type&#39;: &#39;administrative&#39;} . location[&#39;lat&#39;] . &#39;33.7680065&#39; . from bokeh.plotting import figure, output_file, show from bokeh.tile_providers import CARTODBPOSITRON, get_provider #output_file(&quot;tile.html&quot;) #tile_provider = get_provider(CARTODBPOSITRON) # range bounds supplied in web mercator coordinates #p = figure(x_range=(-20000000, 20000000), y_range=(-20000000, 20000000), # x_axis_type=&quot;mercator&quot;, y_axis_type=&quot;mercator&quot;) #p.patches(source = deaths[&quot;Entity&quot;]) #p.add_tile(tile_provider) #show(p) . deaths.sort_values(&quot;Year&quot;, ascending = False) deaths17 = deaths[deaths.Year == 2017] deaths17.iloc[i][&#39;Entity&#39;] deaths17.sample(2) . Entity Code Year Deaths . 4955 Senegal | SEN | 2017 | 2145.934721 | . 587 Belize | BLZ | 2017 | 0.231767 | . coor = pd.DataFrame() for i in range(len(deaths17)): if type(deaths17.iloc[i][&#39;Code&#39;]) == str: location = app.geocode(deaths17.iloc[i][&#39;Entity&#39;]).raw coor = pd.concat( [coor, pd.DataFrame( {&quot;latitude&quot; :location[&#39;lat&#39;], &quot;longitude&quot; :location[&#39;lon&#39;], &quot;Entity&quot; : deaths17.iloc[i][&#39;Entity&#39;] }, index = [i] ) ] ) . type(deaths17.iloc[3][&#39;Code&#39;]) . coor.head(5) . deaths17.head() .",
            "url": "https://smurphy567.github.io/BIOSTAT823/2021/09/10/hw3.html",
            "relUrl": "/2021/09/10/hw3.html",
            "date": " • Sep 10, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Finding the first 10-digit prime in the decimal expansion of 17pi",
            "content": "Three steps are recommended by Dr. Cliburn Chan to break down this problem. . Write a function to generate an expansion of $ pi$. | Write a function to identify if a number is prime. | Write a function to generate sliding windows of a specified width from a long string of numbers. | Step 1 . Generate an expansion of $ pi$. I did this using the mpmath package. . from decimal import * from mpmath import mp . def expand(n): &quot;&quot;&quot;Generate the decimal expansion of pi out to n decimal places&quot;&quot;&quot; mp.dps = n + 1 expansion = mp.pi return expansion . print(expand(10)) . 3.1415926536 . Step 2 . Create a function to identify if a given integer is prime. . Using a simple for loop, I checked if a value, val, was divisible by any integer. I first checked if val was even. If not, I then check odd integers from 3 to $ sqrt{val} + 1$. The given value could not be divisible by anything larger than this upper bound except for itself, which is assumed. The break function is used to stop the for loop from running after a number is shown to be not prime. . import math . def prime_num(val): &quot;&quot;&quot;Identify a prime (True) or not prime (False) integer.&quot;&quot;&quot; status = True #prime until proven otherwise if (val % 2) == 0: #check if val is even status = False if status == True: #if not even, check if divisible by other values for i in range(3,int(math.sqrt(val)) + 1, 2): if (val % i) == 0: status = False break return status . print(prime_num(10000087)) . False . Step 3 . Create a function to generate sliding windows of a specified width within a string. . def sliding(width, string): &quot;&quot;&quot;Generate sliding windows of length &#39;width&#39; within a string.&quot;&quot;&quot; for i in range(0,len(string) - width + 1): window = [string[i:i+width]] print(window) . sliding(10, &quot;abcdefghijklmnop&quot;) . [&#39;abcdefghij&#39;] [&#39;bcdefghijk&#39;] [&#39;cdefghijkl&#39;] [&#39;defghijklm&#39;] [&#39;efghijklmn&#39;] [&#39;fghijklmno&#39;] [&#39;ghijklmnop&#39;] . Combine all three functions to generate the first 17 digit prime number in the decimal expansion of $ pi$. . I decided to try the first thirty decimal places in pi and check if the first 17-digit prime lies within those digits. . Within the sliding function, now called sliding2, I removed the first two values in the pi string, which are &#39;3.&#39; before calling the prime number identification function, prime_num. The break function is once again used, this time it will stop the for loop when a prime number is found (because we are only searching for the first prime). . def sliding2(width, string): &quot;&quot;&quot;Generate sliding windows of length &#39;width&#39; within a string.&quot;&quot;&quot; stat = 0 string = string[4:len(string)] for i in range(0,len(string) - width + 1): window = int(string[i:i+width]) if prime_num(window): stat = 1 print(window, &quot;is the first&quot;, width, &quot;-digit prime in the decimal expansion of pi.&quot;) print(&quot;This sequence can be found starting at the&quot;, i + 1, &quot;th decimal place.&quot;) break . sliding2(10, str(17*expand(30))) . 8649375157 is the first 10 -digit prime in the decimal expansion of pi. This sequence can be found starting at the 18 th decimal place. . The first 10-digit prime number in the decimal expansion of 17$ pi$ is 8649375157, and this sequence can be found starting at the 18th decimal place. .",
            "url": "https://smurphy567.github.io/BIOSTAT823/2021/09/09/hw2.html",
            "relUrl": "/2021/09/09/hw2.html",
            "date": " • Sep 9, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Project Euler Problems",
            "content": "Problem 9: Special Pythagorean Triplet . https://projecteuler.net/problem=9 This problem had been solved by 360,681 people at the time of selection. . The goal of this code is to find the pythagorean triplet $a^2 + b^2 = c^2$ where $a &lt; b &lt; c$ such that $a + b + c = 1000$. . This solution runs two for loops to try different values of a and b and generates c such that $c = sqrt{a^2 + b^2}$. To enforce the inequality, the if statement then checks if the values follow the pattern $ a &lt; b &lt; c $. If the inquality is true, the next if statement checks if the sum of a, b, and c is equal to 1000. If so, it prints the values of each variable and the product of all three. . def special_triplet(): &quot;&quot;&quot; Find the pythagorean triplet such that a, b, and c sum to 1000. Print out the product a*b*c. &quot;&quot;&quot; for a in range(1,1001): for b in range(1, 1001): c = (a**2 + b**2)**0.5 if a &lt; b &lt; c: if a + b + c == 1000: print(&quot;a = &quot;, a, &quot;b = &quot;, b, &quot;c = &quot;, c, &quot;abc = &quot;, a*b*c) special_triplet() . a = 200 b = 375 c = 425.0 abc = 31875000.0 . Problem 42: Coded Triangle Numbers . https://projecteuler.net/problem=42 . This problem had 74,916 solutions at the time of selection. . The goal of this code is to count the number of words in the given file that are triangle words. A triangle word is a word where the number corresponding to each letter in the word (A = 1, B = 2, C = 3, ..., Z = 26) sum to a value, x, that satisfies the following condition: $x = frac{1}{2}n(n+1)$ where n is a natural number. . This is the process followed by the code: . Read the file &#39;p042_words.txt&#39; into the function triangle_nums(). . | Because the given data file had capitalized words in quotation marks separated by commas, all quotation marks are then removed with the replace function and words are split by commas with the split function. . | Within the for loop, the ord() command to converts letters to numbers and subtracts 64 to reset capitalized letters to 1, 2, 3, etc.. The value of each letter in this word is added to the list nums. . | To check if the sum, s = sum(nums), is a triangle number, I checked if $ frac{2s}{j(j=1)} = 1$ for $j in N$, $j leq s$. If the number associated with this word is a triangle number, making this word a triangle word, add one to the count. . | The for loop will then repeat steps 3 and 4 for each word. Once all words are done, the function triangle_nums() will return the number of triangle words. . | Finally, a print statement prints a sentence stating the number of triangle words. . | %%file p042_words.txt &quot;A&quot;,&quot;ABILITY&quot;,&quot;ABLE&quot;,&quot;ABOUT&quot;,&quot;ABOVE&quot;,&quot;ABSENCE&quot;,&quot;ABSOLUTELY&quot;,&quot;ACADEMIC&quot;,&quot;ACCEPT&quot;,&quot;ACCESS&quot;,&quot;ACCIDENT&quot;,&quot;ACCOMPANY&quot;,&quot;ACCORDING&quot;,&quot;ACCOUNT&quot;,&quot;ACHIEVE&quot;,&quot;ACHIEVEMENT&quot;,&quot;ACID&quot;,&quot;ACQUIRE&quot;,&quot;ACROSS&quot;,&quot;ACT&quot;,&quot;ACTION&quot;,&quot;ACTIVE&quot;,&quot;ACTIVITY&quot;,&quot;ACTUAL&quot;,&quot;ACTUALLY&quot;,&quot;ADD&quot;,&quot;ADDITION&quot;,&quot;ADDITIONAL&quot;,&quot;ADDRESS&quot;,&quot;ADMINISTRATION&quot;,&quot;ADMIT&quot;,&quot;ADOPT&quot;,&quot;ADULT&quot;,&quot;ADVANCE&quot;,&quot;ADVANTAGE&quot;,&quot;ADVICE&quot;,&quot;ADVISE&quot;,&quot;AFFAIR&quot;,&quot;AFFECT&quot;,&quot;AFFORD&quot;,&quot;AFRAID&quot;,&quot;AFTER&quot;,&quot;AFTERNOON&quot;,&quot;AFTERWARDS&quot;,&quot;AGAIN&quot;,&quot;AGAINST&quot;,&quot;AGE&quot;,&quot;AGENCY&quot;,&quot;AGENT&quot;,&quot;AGO&quot;,&quot;AGREE&quot;,&quot;AGREEMENT&quot;,&quot;AHEAD&quot;,&quot;AID&quot;,&quot;AIM&quot;,&quot;AIR&quot;,&quot;AIRCRAFT&quot;,&quot;ALL&quot;,&quot;ALLOW&quot;,&quot;ALMOST&quot;,&quot;ALONE&quot;,&quot;ALONG&quot;,&quot;ALREADY&quot;,&quot;ALRIGHT&quot;,&quot;ALSO&quot;,&quot;ALTERNATIVE&quot;,&quot;ALTHOUGH&quot;,&quot;ALWAYS&quot;,&quot;AMONG&quot;,&quot;AMONGST&quot;,&quot;AMOUNT&quot;,&quot;AN&quot;,&quot;ANALYSIS&quot;,&quot;ANCIENT&quot;,&quot;AND&quot;,&quot;ANIMAL&quot;,&quot;ANNOUNCE&quot;,&quot;ANNUAL&quot;,&quot;ANOTHER&quot;,&quot;ANSWER&quot;,&quot;ANY&quot;,&quot;ANYBODY&quot;,&quot;ANYONE&quot;,&quot;ANYTHING&quot;,&quot;ANYWAY&quot;,&quot;APART&quot;,&quot;APPARENT&quot;,&quot;APPARENTLY&quot;,&quot;APPEAL&quot;,&quot;APPEAR&quot;,&quot;APPEARANCE&quot;,&quot;APPLICATION&quot;,&quot;APPLY&quot;,&quot;APPOINT&quot;,&quot;APPOINTMENT&quot;,&quot;APPROACH&quot;,&quot;APPROPRIATE&quot;,&quot;APPROVE&quot;,&quot;AREA&quot;,&quot;ARGUE&quot;,&quot;ARGUMENT&quot;,&quot;ARISE&quot;,&quot;ARM&quot;,&quot;ARMY&quot;,&quot;AROUND&quot;,&quot;ARRANGE&quot;,&quot;ARRANGEMENT&quot;,&quot;ARRIVE&quot;,&quot;ART&quot;,&quot;ARTICLE&quot;,&quot;ARTIST&quot;,&quot;AS&quot;,&quot;ASK&quot;,&quot;ASPECT&quot;,&quot;ASSEMBLY&quot;,&quot;ASSESS&quot;,&quot;ASSESSMENT&quot;,&quot;ASSET&quot;,&quot;ASSOCIATE&quot;,&quot;ASSOCIATION&quot;,&quot;ASSUME&quot;,&quot;ASSUMPTION&quot;,&quot;AT&quot;,&quot;ATMOSPHERE&quot;,&quot;ATTACH&quot;,&quot;ATTACK&quot;,&quot;ATTEMPT&quot;,&quot;ATTEND&quot;,&quot;ATTENTION&quot;,&quot;ATTITUDE&quot;,&quot;ATTRACT&quot;,&quot;ATTRACTIVE&quot;,&quot;AUDIENCE&quot;,&quot;AUTHOR&quot;,&quot;AUTHORITY&quot;,&quot;AVAILABLE&quot;,&quot;AVERAGE&quot;,&quot;AVOID&quot;,&quot;AWARD&quot;,&quot;AWARE&quot;,&quot;AWAY&quot;,&quot;AYE&quot;,&quot;BABY&quot;,&quot;BACK&quot;,&quot;BACKGROUND&quot;,&quot;BAD&quot;,&quot;BAG&quot;,&quot;BALANCE&quot;,&quot;BALL&quot;,&quot;BAND&quot;,&quot;BANK&quot;,&quot;BAR&quot;,&quot;BASE&quot;,&quot;BASIC&quot;,&quot;BASIS&quot;,&quot;BATTLE&quot;,&quot;BE&quot;,&quot;BEAR&quot;,&quot;BEAT&quot;,&quot;BEAUTIFUL&quot;,&quot;BECAUSE&quot;,&quot;BECOME&quot;,&quot;BED&quot;,&quot;BEDROOM&quot;,&quot;BEFORE&quot;,&quot;BEGIN&quot;,&quot;BEGINNING&quot;,&quot;BEHAVIOUR&quot;,&quot;BEHIND&quot;,&quot;BELIEF&quot;,&quot;BELIEVE&quot;,&quot;BELONG&quot;,&quot;BELOW&quot;,&quot;BENEATH&quot;,&quot;BENEFIT&quot;,&quot;BESIDE&quot;,&quot;BEST&quot;,&quot;BETTER&quot;,&quot;BETWEEN&quot;,&quot;BEYOND&quot;,&quot;BIG&quot;,&quot;BILL&quot;,&quot;BIND&quot;,&quot;BIRD&quot;,&quot;BIRTH&quot;,&quot;BIT&quot;,&quot;BLACK&quot;,&quot;BLOCK&quot;,&quot;BLOOD&quot;,&quot;BLOODY&quot;,&quot;BLOW&quot;,&quot;BLUE&quot;,&quot;BOARD&quot;,&quot;BOAT&quot;,&quot;BODY&quot;,&quot;BONE&quot;,&quot;BOOK&quot;,&quot;BORDER&quot;,&quot;BOTH&quot;,&quot;BOTTLE&quot;,&quot;BOTTOM&quot;,&quot;BOX&quot;,&quot;BOY&quot;,&quot;BRAIN&quot;,&quot;BRANCH&quot;,&quot;BREAK&quot;,&quot;BREATH&quot;,&quot;BRIDGE&quot;,&quot;BRIEF&quot;,&quot;BRIGHT&quot;,&quot;BRING&quot;,&quot;BROAD&quot;,&quot;BROTHER&quot;,&quot;BUDGET&quot;,&quot;BUILD&quot;,&quot;BUILDING&quot;,&quot;BURN&quot;,&quot;BUS&quot;,&quot;BUSINESS&quot;,&quot;BUSY&quot;,&quot;BUT&quot;,&quot;BUY&quot;,&quot;BY&quot;,&quot;CABINET&quot;,&quot;CALL&quot;,&quot;CAMPAIGN&quot;,&quot;CAN&quot;,&quot;CANDIDATE&quot;,&quot;CAPABLE&quot;,&quot;CAPACITY&quot;,&quot;CAPITAL&quot;,&quot;CAR&quot;,&quot;CARD&quot;,&quot;CARE&quot;,&quot;CAREER&quot;,&quot;CAREFUL&quot;,&quot;CAREFULLY&quot;,&quot;CARRY&quot;,&quot;CASE&quot;,&quot;CASH&quot;,&quot;CAT&quot;,&quot;CATCH&quot;,&quot;CATEGORY&quot;,&quot;CAUSE&quot;,&quot;CELL&quot;,&quot;CENTRAL&quot;,&quot;CENTRE&quot;,&quot;CENTURY&quot;,&quot;CERTAIN&quot;,&quot;CERTAINLY&quot;,&quot;CHAIN&quot;,&quot;CHAIR&quot;,&quot;CHAIRMAN&quot;,&quot;CHALLENGE&quot;,&quot;CHANCE&quot;,&quot;CHANGE&quot;,&quot;CHANNEL&quot;,&quot;CHAPTER&quot;,&quot;CHARACTER&quot;,&quot;CHARACTERISTIC&quot;,&quot;CHARGE&quot;,&quot;CHEAP&quot;,&quot;CHECK&quot;,&quot;CHEMICAL&quot;,&quot;CHIEF&quot;,&quot;CHILD&quot;,&quot;CHOICE&quot;,&quot;CHOOSE&quot;,&quot;CHURCH&quot;,&quot;CIRCLE&quot;,&quot;CIRCUMSTANCE&quot;,&quot;CITIZEN&quot;,&quot;CITY&quot;,&quot;CIVIL&quot;,&quot;CLAIM&quot;,&quot;CLASS&quot;,&quot;CLEAN&quot;,&quot;CLEAR&quot;,&quot;CLEARLY&quot;,&quot;CLIENT&quot;,&quot;CLIMB&quot;,&quot;CLOSE&quot;,&quot;CLOSELY&quot;,&quot;CLOTHES&quot;,&quot;CLUB&quot;,&quot;COAL&quot;,&quot;CODE&quot;,&quot;COFFEE&quot;,&quot;COLD&quot;,&quot;COLLEAGUE&quot;,&quot;COLLECT&quot;,&quot;COLLECTION&quot;,&quot;COLLEGE&quot;,&quot;COLOUR&quot;,&quot;COMBINATION&quot;,&quot;COMBINE&quot;,&quot;COME&quot;,&quot;COMMENT&quot;,&quot;COMMERCIAL&quot;,&quot;COMMISSION&quot;,&quot;COMMIT&quot;,&quot;COMMITMENT&quot;,&quot;COMMITTEE&quot;,&quot;COMMON&quot;,&quot;COMMUNICATION&quot;,&quot;COMMUNITY&quot;,&quot;COMPANY&quot;,&quot;COMPARE&quot;,&quot;COMPARISON&quot;,&quot;COMPETITION&quot;,&quot;COMPLETE&quot;,&quot;COMPLETELY&quot;,&quot;COMPLEX&quot;,&quot;COMPONENT&quot;,&quot;COMPUTER&quot;,&quot;CONCENTRATE&quot;,&quot;CONCENTRATION&quot;,&quot;CONCEPT&quot;,&quot;CONCERN&quot;,&quot;CONCERNED&quot;,&quot;CONCLUDE&quot;,&quot;CONCLUSION&quot;,&quot;CONDITION&quot;,&quot;CONDUCT&quot;,&quot;CONFERENCE&quot;,&quot;CONFIDENCE&quot;,&quot;CONFIRM&quot;,&quot;CONFLICT&quot;,&quot;CONGRESS&quot;,&quot;CONNECT&quot;,&quot;CONNECTION&quot;,&quot;CONSEQUENCE&quot;,&quot;CONSERVATIVE&quot;,&quot;CONSIDER&quot;,&quot;CONSIDERABLE&quot;,&quot;CONSIDERATION&quot;,&quot;CONSIST&quot;,&quot;CONSTANT&quot;,&quot;CONSTRUCTION&quot;,&quot;CONSUMER&quot;,&quot;CONTACT&quot;,&quot;CONTAIN&quot;,&quot;CONTENT&quot;,&quot;CONTEXT&quot;,&quot;CONTINUE&quot;,&quot;CONTRACT&quot;,&quot;CONTRAST&quot;,&quot;CONTRIBUTE&quot;,&quot;CONTRIBUTION&quot;,&quot;CONTROL&quot;,&quot;CONVENTION&quot;,&quot;CONVERSATION&quot;,&quot;COPY&quot;,&quot;CORNER&quot;,&quot;CORPORATE&quot;,&quot;CORRECT&quot;,&quot;COS&quot;,&quot;COST&quot;,&quot;COULD&quot;,&quot;COUNCIL&quot;,&quot;COUNT&quot;,&quot;COUNTRY&quot;,&quot;COUNTY&quot;,&quot;COUPLE&quot;,&quot;COURSE&quot;,&quot;COURT&quot;,&quot;COVER&quot;,&quot;CREATE&quot;,&quot;CREATION&quot;,&quot;CREDIT&quot;,&quot;CRIME&quot;,&quot;CRIMINAL&quot;,&quot;CRISIS&quot;,&quot;CRITERION&quot;,&quot;CRITICAL&quot;,&quot;CRITICISM&quot;,&quot;CROSS&quot;,&quot;CROWD&quot;,&quot;CRY&quot;,&quot;CULTURAL&quot;,&quot;CULTURE&quot;,&quot;CUP&quot;,&quot;CURRENT&quot;,&quot;CURRENTLY&quot;,&quot;CURRICULUM&quot;,&quot;CUSTOMER&quot;,&quot;CUT&quot;,&quot;DAMAGE&quot;,&quot;DANGER&quot;,&quot;DANGEROUS&quot;,&quot;DARK&quot;,&quot;DATA&quot;,&quot;DATE&quot;,&quot;DAUGHTER&quot;,&quot;DAY&quot;,&quot;DEAD&quot;,&quot;DEAL&quot;,&quot;DEATH&quot;,&quot;DEBATE&quot;,&quot;DEBT&quot;,&quot;DECADE&quot;,&quot;DECIDE&quot;,&quot;DECISION&quot;,&quot;DECLARE&quot;,&quot;DEEP&quot;,&quot;DEFENCE&quot;,&quot;DEFENDANT&quot;,&quot;DEFINE&quot;,&quot;DEFINITION&quot;,&quot;DEGREE&quot;,&quot;DELIVER&quot;,&quot;DEMAND&quot;,&quot;DEMOCRATIC&quot;,&quot;DEMONSTRATE&quot;,&quot;DENY&quot;,&quot;DEPARTMENT&quot;,&quot;DEPEND&quot;,&quot;DEPUTY&quot;,&quot;DERIVE&quot;,&quot;DESCRIBE&quot;,&quot;DESCRIPTION&quot;,&quot;DESIGN&quot;,&quot;DESIRE&quot;,&quot;DESK&quot;,&quot;DESPITE&quot;,&quot;DESTROY&quot;,&quot;DETAIL&quot;,&quot;DETAILED&quot;,&quot;DETERMINE&quot;,&quot;DEVELOP&quot;,&quot;DEVELOPMENT&quot;,&quot;DEVICE&quot;,&quot;DIE&quot;,&quot;DIFFERENCE&quot;,&quot;DIFFERENT&quot;,&quot;DIFFICULT&quot;,&quot;DIFFICULTY&quot;,&quot;DINNER&quot;,&quot;DIRECT&quot;,&quot;DIRECTION&quot;,&quot;DIRECTLY&quot;,&quot;DIRECTOR&quot;,&quot;DISAPPEAR&quot;,&quot;DISCIPLINE&quot;,&quot;DISCOVER&quot;,&quot;DISCUSS&quot;,&quot;DISCUSSION&quot;,&quot;DISEASE&quot;,&quot;DISPLAY&quot;,&quot;DISTANCE&quot;,&quot;DISTINCTION&quot;,&quot;DISTRIBUTION&quot;,&quot;DISTRICT&quot;,&quot;DIVIDE&quot;,&quot;DIVISION&quot;,&quot;DO&quot;,&quot;DOCTOR&quot;,&quot;DOCUMENT&quot;,&quot;DOG&quot;,&quot;DOMESTIC&quot;,&quot;DOOR&quot;,&quot;DOUBLE&quot;,&quot;DOUBT&quot;,&quot;DOWN&quot;,&quot;DRAW&quot;,&quot;DRAWING&quot;,&quot;DREAM&quot;,&quot;DRESS&quot;,&quot;DRINK&quot;,&quot;DRIVE&quot;,&quot;DRIVER&quot;,&quot;DROP&quot;,&quot;DRUG&quot;,&quot;DRY&quot;,&quot;DUE&quot;,&quot;DURING&quot;,&quot;DUTY&quot;,&quot;EACH&quot;,&quot;EAR&quot;,&quot;EARLY&quot;,&quot;EARN&quot;,&quot;EARTH&quot;,&quot;EASILY&quot;,&quot;EAST&quot;,&quot;EASY&quot;,&quot;EAT&quot;,&quot;ECONOMIC&quot;,&quot;ECONOMY&quot;,&quot;EDGE&quot;,&quot;EDITOR&quot;,&quot;EDUCATION&quot;,&quot;EDUCATIONAL&quot;,&quot;EFFECT&quot;,&quot;EFFECTIVE&quot;,&quot;EFFECTIVELY&quot;,&quot;EFFORT&quot;,&quot;EGG&quot;,&quot;EITHER&quot;,&quot;ELDERLY&quot;,&quot;ELECTION&quot;,&quot;ELEMENT&quot;,&quot;ELSE&quot;,&quot;ELSEWHERE&quot;,&quot;EMERGE&quot;,&quot;EMPHASIS&quot;,&quot;EMPLOY&quot;,&quot;EMPLOYEE&quot;,&quot;EMPLOYER&quot;,&quot;EMPLOYMENT&quot;,&quot;EMPTY&quot;,&quot;ENABLE&quot;,&quot;ENCOURAGE&quot;,&quot;END&quot;,&quot;ENEMY&quot;,&quot;ENERGY&quot;,&quot;ENGINE&quot;,&quot;ENGINEERING&quot;,&quot;ENJOY&quot;,&quot;ENOUGH&quot;,&quot;ENSURE&quot;,&quot;ENTER&quot;,&quot;ENTERPRISE&quot;,&quot;ENTIRE&quot;,&quot;ENTIRELY&quot;,&quot;ENTITLE&quot;,&quot;ENTRY&quot;,&quot;ENVIRONMENT&quot;,&quot;ENVIRONMENTAL&quot;,&quot;EQUAL&quot;,&quot;EQUALLY&quot;,&quot;EQUIPMENT&quot;,&quot;ERROR&quot;,&quot;ESCAPE&quot;,&quot;ESPECIALLY&quot;,&quot;ESSENTIAL&quot;,&quot;ESTABLISH&quot;,&quot;ESTABLISHMENT&quot;,&quot;ESTATE&quot;,&quot;ESTIMATE&quot;,&quot;EVEN&quot;,&quot;EVENING&quot;,&quot;EVENT&quot;,&quot;EVENTUALLY&quot;,&quot;EVER&quot;,&quot;EVERY&quot;,&quot;EVERYBODY&quot;,&quot;EVERYONE&quot;,&quot;EVERYTHING&quot;,&quot;EVIDENCE&quot;,&quot;EXACTLY&quot;,&quot;EXAMINATION&quot;,&quot;EXAMINE&quot;,&quot;EXAMPLE&quot;,&quot;EXCELLENT&quot;,&quot;EXCEPT&quot;,&quot;EXCHANGE&quot;,&quot;EXECUTIVE&quot;,&quot;EXERCISE&quot;,&quot;EXHIBITION&quot;,&quot;EXIST&quot;,&quot;EXISTENCE&quot;,&quot;EXISTING&quot;,&quot;EXPECT&quot;,&quot;EXPECTATION&quot;,&quot;EXPENDITURE&quot;,&quot;EXPENSE&quot;,&quot;EXPENSIVE&quot;,&quot;EXPERIENCE&quot;,&quot;EXPERIMENT&quot;,&quot;EXPERT&quot;,&quot;EXPLAIN&quot;,&quot;EXPLANATION&quot;,&quot;EXPLORE&quot;,&quot;EXPRESS&quot;,&quot;EXPRESSION&quot;,&quot;EXTEND&quot;,&quot;EXTENT&quot;,&quot;EXTERNAL&quot;,&quot;EXTRA&quot;,&quot;EXTREMELY&quot;,&quot;EYE&quot;,&quot;FACE&quot;,&quot;FACILITY&quot;,&quot;FACT&quot;,&quot;FACTOR&quot;,&quot;FACTORY&quot;,&quot;FAIL&quot;,&quot;FAILURE&quot;,&quot;FAIR&quot;,&quot;FAIRLY&quot;,&quot;FAITH&quot;,&quot;FALL&quot;,&quot;FAMILIAR&quot;,&quot;FAMILY&quot;,&quot;FAMOUS&quot;,&quot;FAR&quot;,&quot;FARM&quot;,&quot;FARMER&quot;,&quot;FASHION&quot;,&quot;FAST&quot;,&quot;FATHER&quot;,&quot;FAVOUR&quot;,&quot;FEAR&quot;,&quot;FEATURE&quot;,&quot;FEE&quot;,&quot;FEEL&quot;,&quot;FEELING&quot;,&quot;FEMALE&quot;,&quot;FEW&quot;,&quot;FIELD&quot;,&quot;FIGHT&quot;,&quot;FIGURE&quot;,&quot;FILE&quot;,&quot;FILL&quot;,&quot;FILM&quot;,&quot;FINAL&quot;,&quot;FINALLY&quot;,&quot;FINANCE&quot;,&quot;FINANCIAL&quot;,&quot;FIND&quot;,&quot;FINDING&quot;,&quot;FINE&quot;,&quot;FINGER&quot;,&quot;FINISH&quot;,&quot;FIRE&quot;,&quot;FIRM&quot;,&quot;FIRST&quot;,&quot;FISH&quot;,&quot;FIT&quot;,&quot;FIX&quot;,&quot;FLAT&quot;,&quot;FLIGHT&quot;,&quot;FLOOR&quot;,&quot;FLOW&quot;,&quot;FLOWER&quot;,&quot;FLY&quot;,&quot;FOCUS&quot;,&quot;FOLLOW&quot;,&quot;FOLLOWING&quot;,&quot;FOOD&quot;,&quot;FOOT&quot;,&quot;FOOTBALL&quot;,&quot;FOR&quot;,&quot;FORCE&quot;,&quot;FOREIGN&quot;,&quot;FOREST&quot;,&quot;FORGET&quot;,&quot;FORM&quot;,&quot;FORMAL&quot;,&quot;FORMER&quot;,&quot;FORWARD&quot;,&quot;FOUNDATION&quot;,&quot;FREE&quot;,&quot;FREEDOM&quot;,&quot;FREQUENTLY&quot;,&quot;FRESH&quot;,&quot;FRIEND&quot;,&quot;FROM&quot;,&quot;FRONT&quot;,&quot;FRUIT&quot;,&quot;FUEL&quot;,&quot;FULL&quot;,&quot;FULLY&quot;,&quot;FUNCTION&quot;,&quot;FUND&quot;,&quot;FUNNY&quot;,&quot;FURTHER&quot;,&quot;FUTURE&quot;,&quot;GAIN&quot;,&quot;GAME&quot;,&quot;GARDEN&quot;,&quot;GAS&quot;,&quot;GATE&quot;,&quot;GATHER&quot;,&quot;GENERAL&quot;,&quot;GENERALLY&quot;,&quot;GENERATE&quot;,&quot;GENERATION&quot;,&quot;GENTLEMAN&quot;,&quot;GET&quot;,&quot;GIRL&quot;,&quot;GIVE&quot;,&quot;GLASS&quot;,&quot;GO&quot;,&quot;GOAL&quot;,&quot;GOD&quot;,&quot;GOLD&quot;,&quot;GOOD&quot;,&quot;GOVERNMENT&quot;,&quot;GRANT&quot;,&quot;GREAT&quot;,&quot;GREEN&quot;,&quot;GREY&quot;,&quot;GROUND&quot;,&quot;GROUP&quot;,&quot;GROW&quot;,&quot;GROWING&quot;,&quot;GROWTH&quot;,&quot;GUEST&quot;,&quot;GUIDE&quot;,&quot;GUN&quot;,&quot;HAIR&quot;,&quot;HALF&quot;,&quot;HALL&quot;,&quot;HAND&quot;,&quot;HANDLE&quot;,&quot;HANG&quot;,&quot;HAPPEN&quot;,&quot;HAPPY&quot;,&quot;HARD&quot;,&quot;HARDLY&quot;,&quot;HATE&quot;,&quot;HAVE&quot;,&quot;HE&quot;,&quot;HEAD&quot;,&quot;HEALTH&quot;,&quot;HEAR&quot;,&quot;HEART&quot;,&quot;HEAT&quot;,&quot;HEAVY&quot;,&quot;HELL&quot;,&quot;HELP&quot;,&quot;HENCE&quot;,&quot;HER&quot;,&quot;HERE&quot;,&quot;HERSELF&quot;,&quot;HIDE&quot;,&quot;HIGH&quot;,&quot;HIGHLY&quot;,&quot;HILL&quot;,&quot;HIM&quot;,&quot;HIMSELF&quot;,&quot;HIS&quot;,&quot;HISTORICAL&quot;,&quot;HISTORY&quot;,&quot;HIT&quot;,&quot;HOLD&quot;,&quot;HOLE&quot;,&quot;HOLIDAY&quot;,&quot;HOME&quot;,&quot;HOPE&quot;,&quot;HORSE&quot;,&quot;HOSPITAL&quot;,&quot;HOT&quot;,&quot;HOTEL&quot;,&quot;HOUR&quot;,&quot;HOUSE&quot;,&quot;HOUSEHOLD&quot;,&quot;HOUSING&quot;,&quot;HOW&quot;,&quot;HOWEVER&quot;,&quot;HUGE&quot;,&quot;HUMAN&quot;,&quot;HURT&quot;,&quot;HUSBAND&quot;,&quot;I&quot;,&quot;IDEA&quot;,&quot;IDENTIFY&quot;,&quot;IF&quot;,&quot;IGNORE&quot;,&quot;ILLUSTRATE&quot;,&quot;IMAGE&quot;,&quot;IMAGINE&quot;,&quot;IMMEDIATE&quot;,&quot;IMMEDIATELY&quot;,&quot;IMPACT&quot;,&quot;IMPLICATION&quot;,&quot;IMPLY&quot;,&quot;IMPORTANCE&quot;,&quot;IMPORTANT&quot;,&quot;IMPOSE&quot;,&quot;IMPOSSIBLE&quot;,&quot;IMPRESSION&quot;,&quot;IMPROVE&quot;,&quot;IMPROVEMENT&quot;,&quot;IN&quot;,&quot;INCIDENT&quot;,&quot;INCLUDE&quot;,&quot;INCLUDING&quot;,&quot;INCOME&quot;,&quot;INCREASE&quot;,&quot;INCREASED&quot;,&quot;INCREASINGLY&quot;,&quot;INDEED&quot;,&quot;INDEPENDENT&quot;,&quot;INDEX&quot;,&quot;INDICATE&quot;,&quot;INDIVIDUAL&quot;,&quot;INDUSTRIAL&quot;,&quot;INDUSTRY&quot;,&quot;INFLUENCE&quot;,&quot;INFORM&quot;,&quot;INFORMATION&quot;,&quot;INITIAL&quot;,&quot;INITIATIVE&quot;,&quot;INJURY&quot;,&quot;INSIDE&quot;,&quot;INSIST&quot;,&quot;INSTANCE&quot;,&quot;INSTEAD&quot;,&quot;INSTITUTE&quot;,&quot;INSTITUTION&quot;,&quot;INSTRUCTION&quot;,&quot;INSTRUMENT&quot;,&quot;INSURANCE&quot;,&quot;INTEND&quot;,&quot;INTENTION&quot;,&quot;INTEREST&quot;,&quot;INTERESTED&quot;,&quot;INTERESTING&quot;,&quot;INTERNAL&quot;,&quot;INTERNATIONAL&quot;,&quot;INTERPRETATION&quot;,&quot;INTERVIEW&quot;,&quot;INTO&quot;,&quot;INTRODUCE&quot;,&quot;INTRODUCTION&quot;,&quot;INVESTIGATE&quot;,&quot;INVESTIGATION&quot;,&quot;INVESTMENT&quot;,&quot;INVITE&quot;,&quot;INVOLVE&quot;,&quot;IRON&quot;,&quot;IS&quot;,&quot;ISLAND&quot;,&quot;ISSUE&quot;,&quot;IT&quot;,&quot;ITEM&quot;,&quot;ITS&quot;,&quot;ITSELF&quot;,&quot;JOB&quot;,&quot;JOIN&quot;,&quot;JOINT&quot;,&quot;JOURNEY&quot;,&quot;JUDGE&quot;,&quot;JUMP&quot;,&quot;JUST&quot;,&quot;JUSTICE&quot;,&quot;KEEP&quot;,&quot;KEY&quot;,&quot;KID&quot;,&quot;KILL&quot;,&quot;KIND&quot;,&quot;KING&quot;,&quot;KITCHEN&quot;,&quot;KNEE&quot;,&quot;KNOW&quot;,&quot;KNOWLEDGE&quot;,&quot;LABOUR&quot;,&quot;LACK&quot;,&quot;LADY&quot;,&quot;LAND&quot;,&quot;LANGUAGE&quot;,&quot;LARGE&quot;,&quot;LARGELY&quot;,&quot;LAST&quot;,&quot;LATE&quot;,&quot;LATER&quot;,&quot;LATTER&quot;,&quot;LAUGH&quot;,&quot;LAUNCH&quot;,&quot;LAW&quot;,&quot;LAWYER&quot;,&quot;LAY&quot;,&quot;LEAD&quot;,&quot;LEADER&quot;,&quot;LEADERSHIP&quot;,&quot;LEADING&quot;,&quot;LEAF&quot;,&quot;LEAGUE&quot;,&quot;LEAN&quot;,&quot;LEARN&quot;,&quot;LEAST&quot;,&quot;LEAVE&quot;,&quot;LEFT&quot;,&quot;LEG&quot;,&quot;LEGAL&quot;,&quot;LEGISLATION&quot;,&quot;LENGTH&quot;,&quot;LESS&quot;,&quot;LET&quot;,&quot;LETTER&quot;,&quot;LEVEL&quot;,&quot;LIABILITY&quot;,&quot;LIBERAL&quot;,&quot;LIBRARY&quot;,&quot;LIE&quot;,&quot;LIFE&quot;,&quot;LIFT&quot;,&quot;LIGHT&quot;,&quot;LIKE&quot;,&quot;LIKELY&quot;,&quot;LIMIT&quot;,&quot;LIMITED&quot;,&quot;LINE&quot;,&quot;LINK&quot;,&quot;LIP&quot;,&quot;LIST&quot;,&quot;LISTEN&quot;,&quot;LITERATURE&quot;,&quot;LITTLE&quot;,&quot;LIVE&quot;,&quot;LIVING&quot;,&quot;LOAN&quot;,&quot;LOCAL&quot;,&quot;LOCATION&quot;,&quot;LONG&quot;,&quot;LOOK&quot;,&quot;LORD&quot;,&quot;LOSE&quot;,&quot;LOSS&quot;,&quot;LOT&quot;,&quot;LOVE&quot;,&quot;LOVELY&quot;,&quot;LOW&quot;,&quot;LUNCH&quot;,&quot;MACHINE&quot;,&quot;MAGAZINE&quot;,&quot;MAIN&quot;,&quot;MAINLY&quot;,&quot;MAINTAIN&quot;,&quot;MAJOR&quot;,&quot;MAJORITY&quot;,&quot;MAKE&quot;,&quot;MALE&quot;,&quot;MAN&quot;,&quot;MANAGE&quot;,&quot;MANAGEMENT&quot;,&quot;MANAGER&quot;,&quot;MANNER&quot;,&quot;MANY&quot;,&quot;MAP&quot;,&quot;MARK&quot;,&quot;MARKET&quot;,&quot;MARRIAGE&quot;,&quot;MARRIED&quot;,&quot;MARRY&quot;,&quot;MASS&quot;,&quot;MASTER&quot;,&quot;MATCH&quot;,&quot;MATERIAL&quot;,&quot;MATTER&quot;,&quot;MAY&quot;,&quot;MAYBE&quot;,&quot;ME&quot;,&quot;MEAL&quot;,&quot;MEAN&quot;,&quot;MEANING&quot;,&quot;MEANS&quot;,&quot;MEANWHILE&quot;,&quot;MEASURE&quot;,&quot;MECHANISM&quot;,&quot;MEDIA&quot;,&quot;MEDICAL&quot;,&quot;MEET&quot;,&quot;MEETING&quot;,&quot;MEMBER&quot;,&quot;MEMBERSHIP&quot;,&quot;MEMORY&quot;,&quot;MENTAL&quot;,&quot;MENTION&quot;,&quot;MERELY&quot;,&quot;MESSAGE&quot;,&quot;METAL&quot;,&quot;METHOD&quot;,&quot;MIDDLE&quot;,&quot;MIGHT&quot;,&quot;MILE&quot;,&quot;MILITARY&quot;,&quot;MILK&quot;,&quot;MIND&quot;,&quot;MINE&quot;,&quot;MINISTER&quot;,&quot;MINISTRY&quot;,&quot;MINUTE&quot;,&quot;MISS&quot;,&quot;MISTAKE&quot;,&quot;MODEL&quot;,&quot;MODERN&quot;,&quot;MODULE&quot;,&quot;MOMENT&quot;,&quot;MONEY&quot;,&quot;MONTH&quot;,&quot;MORE&quot;,&quot;MORNING&quot;,&quot;MOST&quot;,&quot;MOTHER&quot;,&quot;MOTION&quot;,&quot;MOTOR&quot;,&quot;MOUNTAIN&quot;,&quot;MOUTH&quot;,&quot;MOVE&quot;,&quot;MOVEMENT&quot;,&quot;MUCH&quot;,&quot;MURDER&quot;,&quot;MUSEUM&quot;,&quot;MUSIC&quot;,&quot;MUST&quot;,&quot;MY&quot;,&quot;MYSELF&quot;,&quot;NAME&quot;,&quot;NARROW&quot;,&quot;NATION&quot;,&quot;NATIONAL&quot;,&quot;NATURAL&quot;,&quot;NATURE&quot;,&quot;NEAR&quot;,&quot;NEARLY&quot;,&quot;NECESSARILY&quot;,&quot;NECESSARY&quot;,&quot;NECK&quot;,&quot;NEED&quot;,&quot;NEGOTIATION&quot;,&quot;NEIGHBOUR&quot;,&quot;NEITHER&quot;,&quot;NETWORK&quot;,&quot;NEVER&quot;,&quot;NEVERTHELESS&quot;,&quot;NEW&quot;,&quot;NEWS&quot;,&quot;NEWSPAPER&quot;,&quot;NEXT&quot;,&quot;NICE&quot;,&quot;NIGHT&quot;,&quot;NO&quot;,&quot;NOBODY&quot;,&quot;NOD&quot;,&quot;NOISE&quot;,&quot;NONE&quot;,&quot;NOR&quot;,&quot;NORMAL&quot;,&quot;NORMALLY&quot;,&quot;NORTH&quot;,&quot;NORTHERN&quot;,&quot;NOSE&quot;,&quot;NOT&quot;,&quot;NOTE&quot;,&quot;NOTHING&quot;,&quot;NOTICE&quot;,&quot;NOTION&quot;,&quot;NOW&quot;,&quot;NUCLEAR&quot;,&quot;NUMBER&quot;,&quot;NURSE&quot;,&quot;OBJECT&quot;,&quot;OBJECTIVE&quot;,&quot;OBSERVATION&quot;,&quot;OBSERVE&quot;,&quot;OBTAIN&quot;,&quot;OBVIOUS&quot;,&quot;OBVIOUSLY&quot;,&quot;OCCASION&quot;,&quot;OCCUR&quot;,&quot;ODD&quot;,&quot;OF&quot;,&quot;OFF&quot;,&quot;OFFENCE&quot;,&quot;OFFER&quot;,&quot;OFFICE&quot;,&quot;OFFICER&quot;,&quot;OFFICIAL&quot;,&quot;OFTEN&quot;,&quot;OIL&quot;,&quot;OKAY&quot;,&quot;OLD&quot;,&quot;ON&quot;,&quot;ONCE&quot;,&quot;ONE&quot;,&quot;ONLY&quot;,&quot;ONTO&quot;,&quot;OPEN&quot;,&quot;OPERATE&quot;,&quot;OPERATION&quot;,&quot;OPINION&quot;,&quot;OPPORTUNITY&quot;,&quot;OPPOSITION&quot;,&quot;OPTION&quot;,&quot;OR&quot;,&quot;ORDER&quot;,&quot;ORDINARY&quot;,&quot;ORGANISATION&quot;,&quot;ORGANISE&quot;,&quot;ORGANIZATION&quot;,&quot;ORIGIN&quot;,&quot;ORIGINAL&quot;,&quot;OTHER&quot;,&quot;OTHERWISE&quot;,&quot;OUGHT&quot;,&quot;OUR&quot;,&quot;OURSELVES&quot;,&quot;OUT&quot;,&quot;OUTCOME&quot;,&quot;OUTPUT&quot;,&quot;OUTSIDE&quot;,&quot;OVER&quot;,&quot;OVERALL&quot;,&quot;OWN&quot;,&quot;OWNER&quot;,&quot;PACKAGE&quot;,&quot;PAGE&quot;,&quot;PAIN&quot;,&quot;PAINT&quot;,&quot;PAINTING&quot;,&quot;PAIR&quot;,&quot;PANEL&quot;,&quot;PAPER&quot;,&quot;PARENT&quot;,&quot;PARK&quot;,&quot;PARLIAMENT&quot;,&quot;PART&quot;,&quot;PARTICULAR&quot;,&quot;PARTICULARLY&quot;,&quot;PARTLY&quot;,&quot;PARTNER&quot;,&quot;PARTY&quot;,&quot;PASS&quot;,&quot;PASSAGE&quot;,&quot;PAST&quot;,&quot;PATH&quot;,&quot;PATIENT&quot;,&quot;PATTERN&quot;,&quot;PAY&quot;,&quot;PAYMENT&quot;,&quot;PEACE&quot;,&quot;PENSION&quot;,&quot;PEOPLE&quot;,&quot;PER&quot;,&quot;PERCENT&quot;,&quot;PERFECT&quot;,&quot;PERFORM&quot;,&quot;PERFORMANCE&quot;,&quot;PERHAPS&quot;,&quot;PERIOD&quot;,&quot;PERMANENT&quot;,&quot;PERSON&quot;,&quot;PERSONAL&quot;,&quot;PERSUADE&quot;,&quot;PHASE&quot;,&quot;PHONE&quot;,&quot;PHOTOGRAPH&quot;,&quot;PHYSICAL&quot;,&quot;PICK&quot;,&quot;PICTURE&quot;,&quot;PIECE&quot;,&quot;PLACE&quot;,&quot;PLAN&quot;,&quot;PLANNING&quot;,&quot;PLANT&quot;,&quot;PLASTIC&quot;,&quot;PLATE&quot;,&quot;PLAY&quot;,&quot;PLAYER&quot;,&quot;PLEASE&quot;,&quot;PLEASURE&quot;,&quot;PLENTY&quot;,&quot;PLUS&quot;,&quot;POCKET&quot;,&quot;POINT&quot;,&quot;POLICE&quot;,&quot;POLICY&quot;,&quot;POLITICAL&quot;,&quot;POLITICS&quot;,&quot;POOL&quot;,&quot;POOR&quot;,&quot;POPULAR&quot;,&quot;POPULATION&quot;,&quot;POSITION&quot;,&quot;POSITIVE&quot;,&quot;POSSIBILITY&quot;,&quot;POSSIBLE&quot;,&quot;POSSIBLY&quot;,&quot;POST&quot;,&quot;POTENTIAL&quot;,&quot;POUND&quot;,&quot;POWER&quot;,&quot;POWERFUL&quot;,&quot;PRACTICAL&quot;,&quot;PRACTICE&quot;,&quot;PREFER&quot;,&quot;PREPARE&quot;,&quot;PRESENCE&quot;,&quot;PRESENT&quot;,&quot;PRESIDENT&quot;,&quot;PRESS&quot;,&quot;PRESSURE&quot;,&quot;PRETTY&quot;,&quot;PREVENT&quot;,&quot;PREVIOUS&quot;,&quot;PREVIOUSLY&quot;,&quot;PRICE&quot;,&quot;PRIMARY&quot;,&quot;PRIME&quot;,&quot;PRINCIPLE&quot;,&quot;PRIORITY&quot;,&quot;PRISON&quot;,&quot;PRISONER&quot;,&quot;PRIVATE&quot;,&quot;PROBABLY&quot;,&quot;PROBLEM&quot;,&quot;PROCEDURE&quot;,&quot;PROCESS&quot;,&quot;PRODUCE&quot;,&quot;PRODUCT&quot;,&quot;PRODUCTION&quot;,&quot;PROFESSIONAL&quot;,&quot;PROFIT&quot;,&quot;PROGRAM&quot;,&quot;PROGRAMME&quot;,&quot;PROGRESS&quot;,&quot;PROJECT&quot;,&quot;PROMISE&quot;,&quot;PROMOTE&quot;,&quot;PROPER&quot;,&quot;PROPERLY&quot;,&quot;PROPERTY&quot;,&quot;PROPORTION&quot;,&quot;PROPOSE&quot;,&quot;PROPOSAL&quot;,&quot;PROSPECT&quot;,&quot;PROTECT&quot;,&quot;PROTECTION&quot;,&quot;PROVE&quot;,&quot;PROVIDE&quot;,&quot;PROVIDED&quot;,&quot;PROVISION&quot;,&quot;PUB&quot;,&quot;PUBLIC&quot;,&quot;PUBLICATION&quot;,&quot;PUBLISH&quot;,&quot;PULL&quot;,&quot;PUPIL&quot;,&quot;PURPOSE&quot;,&quot;PUSH&quot;,&quot;PUT&quot;,&quot;QUALITY&quot;,&quot;QUARTER&quot;,&quot;QUESTION&quot;,&quot;QUICK&quot;,&quot;QUICKLY&quot;,&quot;QUIET&quot;,&quot;QUITE&quot;,&quot;RACE&quot;,&quot;RADIO&quot;,&quot;RAILWAY&quot;,&quot;RAIN&quot;,&quot;RAISE&quot;,&quot;RANGE&quot;,&quot;RAPIDLY&quot;,&quot;RARE&quot;,&quot;RATE&quot;,&quot;RATHER&quot;,&quot;REACH&quot;,&quot;REACTION&quot;,&quot;READ&quot;,&quot;READER&quot;,&quot;READING&quot;,&quot;READY&quot;,&quot;REAL&quot;,&quot;REALISE&quot;,&quot;REALITY&quot;,&quot;REALIZE&quot;,&quot;REALLY&quot;,&quot;REASON&quot;,&quot;REASONABLE&quot;,&quot;RECALL&quot;,&quot;RECEIVE&quot;,&quot;RECENT&quot;,&quot;RECENTLY&quot;,&quot;RECOGNISE&quot;,&quot;RECOGNITION&quot;,&quot;RECOGNIZE&quot;,&quot;RECOMMEND&quot;,&quot;RECORD&quot;,&quot;RECOVER&quot;,&quot;RED&quot;,&quot;REDUCE&quot;,&quot;REDUCTION&quot;,&quot;REFER&quot;,&quot;REFERENCE&quot;,&quot;REFLECT&quot;,&quot;REFORM&quot;,&quot;REFUSE&quot;,&quot;REGARD&quot;,&quot;REGION&quot;,&quot;REGIONAL&quot;,&quot;REGULAR&quot;,&quot;REGULATION&quot;,&quot;REJECT&quot;,&quot;RELATE&quot;,&quot;RELATION&quot;,&quot;RELATIONSHIP&quot;,&quot;RELATIVE&quot;,&quot;RELATIVELY&quot;,&quot;RELEASE&quot;,&quot;RELEVANT&quot;,&quot;RELIEF&quot;,&quot;RELIGION&quot;,&quot;RELIGIOUS&quot;,&quot;RELY&quot;,&quot;REMAIN&quot;,&quot;REMEMBER&quot;,&quot;REMIND&quot;,&quot;REMOVE&quot;,&quot;REPEAT&quot;,&quot;REPLACE&quot;,&quot;REPLY&quot;,&quot;REPORT&quot;,&quot;REPRESENT&quot;,&quot;REPRESENTATION&quot;,&quot;REPRESENTATIVE&quot;,&quot;REQUEST&quot;,&quot;REQUIRE&quot;,&quot;REQUIREMENT&quot;,&quot;RESEARCH&quot;,&quot;RESOURCE&quot;,&quot;RESPECT&quot;,&quot;RESPOND&quot;,&quot;RESPONSE&quot;,&quot;RESPONSIBILITY&quot;,&quot;RESPONSIBLE&quot;,&quot;REST&quot;,&quot;RESTAURANT&quot;,&quot;RESULT&quot;,&quot;RETAIN&quot;,&quot;RETURN&quot;,&quot;REVEAL&quot;,&quot;REVENUE&quot;,&quot;REVIEW&quot;,&quot;REVOLUTION&quot;,&quot;RICH&quot;,&quot;RIDE&quot;,&quot;RIGHT&quot;,&quot;RING&quot;,&quot;RISE&quot;,&quot;RISK&quot;,&quot;RIVER&quot;,&quot;ROAD&quot;,&quot;ROCK&quot;,&quot;ROLE&quot;,&quot;ROLL&quot;,&quot;ROOF&quot;,&quot;ROOM&quot;,&quot;ROUND&quot;,&quot;ROUTE&quot;,&quot;ROW&quot;,&quot;ROYAL&quot;,&quot;RULE&quot;,&quot;RUN&quot;,&quot;RURAL&quot;,&quot;SAFE&quot;,&quot;SAFETY&quot;,&quot;SALE&quot;,&quot;SAME&quot;,&quot;SAMPLE&quot;,&quot;SATISFY&quot;,&quot;SAVE&quot;,&quot;SAY&quot;,&quot;SCALE&quot;,&quot;SCENE&quot;,&quot;SCHEME&quot;,&quot;SCHOOL&quot;,&quot;SCIENCE&quot;,&quot;SCIENTIFIC&quot;,&quot;SCIENTIST&quot;,&quot;SCORE&quot;,&quot;SCREEN&quot;,&quot;SEA&quot;,&quot;SEARCH&quot;,&quot;SEASON&quot;,&quot;SEAT&quot;,&quot;SECOND&quot;,&quot;SECONDARY&quot;,&quot;SECRETARY&quot;,&quot;SECTION&quot;,&quot;SECTOR&quot;,&quot;SECURE&quot;,&quot;SECURITY&quot;,&quot;SEE&quot;,&quot;SEEK&quot;,&quot;SEEM&quot;,&quot;SELECT&quot;,&quot;SELECTION&quot;,&quot;SELL&quot;,&quot;SEND&quot;,&quot;SENIOR&quot;,&quot;SENSE&quot;,&quot;SENTENCE&quot;,&quot;SEPARATE&quot;,&quot;SEQUENCE&quot;,&quot;SERIES&quot;,&quot;SERIOUS&quot;,&quot;SERIOUSLY&quot;,&quot;SERVANT&quot;,&quot;SERVE&quot;,&quot;SERVICE&quot;,&quot;SESSION&quot;,&quot;SET&quot;,&quot;SETTLE&quot;,&quot;SETTLEMENT&quot;,&quot;SEVERAL&quot;,&quot;SEVERE&quot;,&quot;SEX&quot;,&quot;SEXUAL&quot;,&quot;SHAKE&quot;,&quot;SHALL&quot;,&quot;SHAPE&quot;,&quot;SHARE&quot;,&quot;SHE&quot;,&quot;SHEET&quot;,&quot;SHIP&quot;,&quot;SHOE&quot;,&quot;SHOOT&quot;,&quot;SHOP&quot;,&quot;SHORT&quot;,&quot;SHOT&quot;,&quot;SHOULD&quot;,&quot;SHOULDER&quot;,&quot;SHOUT&quot;,&quot;SHOW&quot;,&quot;SHUT&quot;,&quot;SIDE&quot;,&quot;SIGHT&quot;,&quot;SIGN&quot;,&quot;SIGNAL&quot;,&quot;SIGNIFICANCE&quot;,&quot;SIGNIFICANT&quot;,&quot;SILENCE&quot;,&quot;SIMILAR&quot;,&quot;SIMPLE&quot;,&quot;SIMPLY&quot;,&quot;SINCE&quot;,&quot;SING&quot;,&quot;SINGLE&quot;,&quot;SIR&quot;,&quot;SISTER&quot;,&quot;SIT&quot;,&quot;SITE&quot;,&quot;SITUATION&quot;,&quot;SIZE&quot;,&quot;SKILL&quot;,&quot;SKIN&quot;,&quot;SKY&quot;,&quot;SLEEP&quot;,&quot;SLIGHTLY&quot;,&quot;SLIP&quot;,&quot;SLOW&quot;,&quot;SLOWLY&quot;,&quot;SMALL&quot;,&quot;SMILE&quot;,&quot;SO&quot;,&quot;SOCIAL&quot;,&quot;SOCIETY&quot;,&quot;SOFT&quot;,&quot;SOFTWARE&quot;,&quot;SOIL&quot;,&quot;SOLDIER&quot;,&quot;SOLICITOR&quot;,&quot;SOLUTION&quot;,&quot;SOME&quot;,&quot;SOMEBODY&quot;,&quot;SOMEONE&quot;,&quot;SOMETHING&quot;,&quot;SOMETIMES&quot;,&quot;SOMEWHAT&quot;,&quot;SOMEWHERE&quot;,&quot;SON&quot;,&quot;SONG&quot;,&quot;SOON&quot;,&quot;SORRY&quot;,&quot;SORT&quot;,&quot;SOUND&quot;,&quot;SOURCE&quot;,&quot;SOUTH&quot;,&quot;SOUTHERN&quot;,&quot;SPACE&quot;,&quot;SPEAK&quot;,&quot;SPEAKER&quot;,&quot;SPECIAL&quot;,&quot;SPECIES&quot;,&quot;SPECIFIC&quot;,&quot;SPEECH&quot;,&quot;SPEED&quot;,&quot;SPEND&quot;,&quot;SPIRIT&quot;,&quot;SPORT&quot;,&quot;SPOT&quot;,&quot;SPREAD&quot;,&quot;SPRING&quot;,&quot;STAFF&quot;,&quot;STAGE&quot;,&quot;STAND&quot;,&quot;STANDARD&quot;,&quot;STAR&quot;,&quot;START&quot;,&quot;STATE&quot;,&quot;STATEMENT&quot;,&quot;STATION&quot;,&quot;STATUS&quot;,&quot;STAY&quot;,&quot;STEAL&quot;,&quot;STEP&quot;,&quot;STICK&quot;,&quot;STILL&quot;,&quot;STOCK&quot;,&quot;STONE&quot;,&quot;STOP&quot;,&quot;STORE&quot;,&quot;STORY&quot;,&quot;STRAIGHT&quot;,&quot;STRANGE&quot;,&quot;STRATEGY&quot;,&quot;STREET&quot;,&quot;STRENGTH&quot;,&quot;STRIKE&quot;,&quot;STRONG&quot;,&quot;STRONGLY&quot;,&quot;STRUCTURE&quot;,&quot;STUDENT&quot;,&quot;STUDIO&quot;,&quot;STUDY&quot;,&quot;STUFF&quot;,&quot;STYLE&quot;,&quot;SUBJECT&quot;,&quot;SUBSTANTIAL&quot;,&quot;SUCCEED&quot;,&quot;SUCCESS&quot;,&quot;SUCCESSFUL&quot;,&quot;SUCH&quot;,&quot;SUDDENLY&quot;,&quot;SUFFER&quot;,&quot;SUFFICIENT&quot;,&quot;SUGGEST&quot;,&quot;SUGGESTION&quot;,&quot;SUITABLE&quot;,&quot;SUM&quot;,&quot;SUMMER&quot;,&quot;SUN&quot;,&quot;SUPPLY&quot;,&quot;SUPPORT&quot;,&quot;SUPPOSE&quot;,&quot;SURE&quot;,&quot;SURELY&quot;,&quot;SURFACE&quot;,&quot;SURPRISE&quot;,&quot;SURROUND&quot;,&quot;SURVEY&quot;,&quot;SURVIVE&quot;,&quot;SWITCH&quot;,&quot;SYSTEM&quot;,&quot;TABLE&quot;,&quot;TAKE&quot;,&quot;TALK&quot;,&quot;TALL&quot;,&quot;TAPE&quot;,&quot;TARGET&quot;,&quot;TASK&quot;,&quot;TAX&quot;,&quot;TEA&quot;,&quot;TEACH&quot;,&quot;TEACHER&quot;,&quot;TEACHING&quot;,&quot;TEAM&quot;,&quot;TEAR&quot;,&quot;TECHNICAL&quot;,&quot;TECHNIQUE&quot;,&quot;TECHNOLOGY&quot;,&quot;TELEPHONE&quot;,&quot;TELEVISION&quot;,&quot;TELL&quot;,&quot;TEMPERATURE&quot;,&quot;TEND&quot;,&quot;TERM&quot;,&quot;TERMS&quot;,&quot;TERRIBLE&quot;,&quot;TEST&quot;,&quot;TEXT&quot;,&quot;THAN&quot;,&quot;THANK&quot;,&quot;THANKS&quot;,&quot;THAT&quot;,&quot;THE&quot;,&quot;THEATRE&quot;,&quot;THEIR&quot;,&quot;THEM&quot;,&quot;THEME&quot;,&quot;THEMSELVES&quot;,&quot;THEN&quot;,&quot;THEORY&quot;,&quot;THERE&quot;,&quot;THEREFORE&quot;,&quot;THESE&quot;,&quot;THEY&quot;,&quot;THIN&quot;,&quot;THING&quot;,&quot;THINK&quot;,&quot;THIS&quot;,&quot;THOSE&quot;,&quot;THOUGH&quot;,&quot;THOUGHT&quot;,&quot;THREAT&quot;,&quot;THREATEN&quot;,&quot;THROUGH&quot;,&quot;THROUGHOUT&quot;,&quot;THROW&quot;,&quot;THUS&quot;,&quot;TICKET&quot;,&quot;TIME&quot;,&quot;TINY&quot;,&quot;TITLE&quot;,&quot;TO&quot;,&quot;TODAY&quot;,&quot;TOGETHER&quot;,&quot;TOMORROW&quot;,&quot;TONE&quot;,&quot;TONIGHT&quot;,&quot;TOO&quot;,&quot;TOOL&quot;,&quot;TOOTH&quot;,&quot;TOP&quot;,&quot;TOTAL&quot;,&quot;TOTALLY&quot;,&quot;TOUCH&quot;,&quot;TOUR&quot;,&quot;TOWARDS&quot;,&quot;TOWN&quot;,&quot;TRACK&quot;,&quot;TRADE&quot;,&quot;TRADITION&quot;,&quot;TRADITIONAL&quot;,&quot;TRAFFIC&quot;,&quot;TRAIN&quot;,&quot;TRAINING&quot;,&quot;TRANSFER&quot;,&quot;TRANSPORT&quot;,&quot;TRAVEL&quot;,&quot;TREAT&quot;,&quot;TREATMENT&quot;,&quot;TREATY&quot;,&quot;TREE&quot;,&quot;TREND&quot;,&quot;TRIAL&quot;,&quot;TRIP&quot;,&quot;TROOP&quot;,&quot;TROUBLE&quot;,&quot;TRUE&quot;,&quot;TRUST&quot;,&quot;TRUTH&quot;,&quot;TRY&quot;,&quot;TURN&quot;,&quot;TWICE&quot;,&quot;TYPE&quot;,&quot;TYPICAL&quot;,&quot;UNABLE&quot;,&quot;UNDER&quot;,&quot;UNDERSTAND&quot;,&quot;UNDERSTANDING&quot;,&quot;UNDERTAKE&quot;,&quot;UNEMPLOYMENT&quot;,&quot;UNFORTUNATELY&quot;,&quot;UNION&quot;,&quot;UNIT&quot;,&quot;UNITED&quot;,&quot;UNIVERSITY&quot;,&quot;UNLESS&quot;,&quot;UNLIKELY&quot;,&quot;UNTIL&quot;,&quot;UP&quot;,&quot;UPON&quot;,&quot;UPPER&quot;,&quot;URBAN&quot;,&quot;US&quot;,&quot;USE&quot;,&quot;USED&quot;,&quot;USEFUL&quot;,&quot;USER&quot;,&quot;USUAL&quot;,&quot;USUALLY&quot;,&quot;VALUE&quot;,&quot;VARIATION&quot;,&quot;VARIETY&quot;,&quot;VARIOUS&quot;,&quot;VARY&quot;,&quot;VAST&quot;,&quot;VEHICLE&quot;,&quot;VERSION&quot;,&quot;VERY&quot;,&quot;VIA&quot;,&quot;VICTIM&quot;,&quot;VICTORY&quot;,&quot;VIDEO&quot;,&quot;VIEW&quot;,&quot;VILLAGE&quot;,&quot;VIOLENCE&quot;,&quot;VISION&quot;,&quot;VISIT&quot;,&quot;VISITOR&quot;,&quot;VITAL&quot;,&quot;VOICE&quot;,&quot;VOLUME&quot;,&quot;VOTE&quot;,&quot;WAGE&quot;,&quot;WAIT&quot;,&quot;WALK&quot;,&quot;WALL&quot;,&quot;WANT&quot;,&quot;WAR&quot;,&quot;WARM&quot;,&quot;WARN&quot;,&quot;WASH&quot;,&quot;WATCH&quot;,&quot;WATER&quot;,&quot;WAVE&quot;,&quot;WAY&quot;,&quot;WE&quot;,&quot;WEAK&quot;,&quot;WEAPON&quot;,&quot;WEAR&quot;,&quot;WEATHER&quot;,&quot;WEEK&quot;,&quot;WEEKEND&quot;,&quot;WEIGHT&quot;,&quot;WELCOME&quot;,&quot;WELFARE&quot;,&quot;WELL&quot;,&quot;WEST&quot;,&quot;WESTERN&quot;,&quot;WHAT&quot;,&quot;WHATEVER&quot;,&quot;WHEN&quot;,&quot;WHERE&quot;,&quot;WHEREAS&quot;,&quot;WHETHER&quot;,&quot;WHICH&quot;,&quot;WHILE&quot;,&quot;WHILST&quot;,&quot;WHITE&quot;,&quot;WHO&quot;,&quot;WHOLE&quot;,&quot;WHOM&quot;,&quot;WHOSE&quot;,&quot;WHY&quot;,&quot;WIDE&quot;,&quot;WIDELY&quot;,&quot;WIFE&quot;,&quot;WILD&quot;,&quot;WILL&quot;,&quot;WIN&quot;,&quot;WIND&quot;,&quot;WINDOW&quot;,&quot;WINE&quot;,&quot;WING&quot;,&quot;WINNER&quot;,&quot;WINTER&quot;,&quot;WISH&quot;,&quot;WITH&quot;,&quot;WITHDRAW&quot;,&quot;WITHIN&quot;,&quot;WITHOUT&quot;,&quot;WOMAN&quot;,&quot;WONDER&quot;,&quot;WONDERFUL&quot;,&quot;WOOD&quot;,&quot;WORD&quot;,&quot;WORK&quot;,&quot;WORKER&quot;,&quot;WORKING&quot;,&quot;WORKS&quot;,&quot;WORLD&quot;,&quot;WORRY&quot;,&quot;WORTH&quot;,&quot;WOULD&quot;,&quot;WRITE&quot;,&quot;WRITER&quot;,&quot;WRITING&quot;,&quot;WRONG&quot;,&quot;YARD&quot;,&quot;YEAH&quot;,&quot;YEAR&quot;,&quot;YES&quot;,&quot;YESTERDAY&quot;,&quot;YET&quot;,&quot;YOU&quot;,&quot;YOUNG&quot;,&quot;YOUR&quot;,&quot;YOURSELF&quot;,&quot;YOUTH&quot; . Overwriting p042_words.txt . import math def triangle_nums(file): &quot;&quot;&quot; Calculate the sum of the numerical values of each word, and determine if the sum is a triangle number (making the word a triangle word. Count how many triangle words are in the file. &quot;&quot;&quot; count = 0 with open(file) as f: for line in f: line = line.replace(&#39;&quot;&#39;,&#39;&#39;) words = line.split(&#39;,&#39;) for i in range(len(words)): nums = [] for letter in words[i]: nums.append(ord(letter) - 64) for j in range(1,int(sum(nums))): if (2*sum(nums))/(j*(j+1)) == 1: count += 1 return count tri_words = triangle_nums(&quot;p042_words.txt&quot;) print(&quot;There are&quot;, tri_words, &quot;triangle words in the given file.&quot;) . There are 161 triangle words in the given file. . Problem 89: Roman Numerals . https://projecteuler.net/problem=89 . This problem had 21,086 solutions at the time of selection. The problem statement says to find the number of characters saved by writing each of these in their minimal form. An explanation of roman numerals can be found here: https://projecteuler.net/about=roman_numerals . This is the process followed by the code: . Read the file &#39;roman.txt&#39; into the function roman_numerals(). . | Set unlet, the variable tracking the number of unnecessary letters, to 0. . | Open the file, and read through line by line. . | Set the number of I characters and the current number of unnecessary characters to 0 (in the form of a list , [0,0]). . | For the first line, run the function count_fives to count the number of I&#39;s. Count how many V&#39;s will replace the I&#39;s. Add four times the number of V&#39;s to count. Return the number of V&#39;s and count. . | Still for the first line, run the function count_ones to count the number of V&#39;s, including the V&#39;s added in step 5. Count how many X&#39;s will replace the V&#39;s. Return the number of X&#39;s and count. . | Repeat step 5 with X&#39;s and L&#39;s. . | Repeat step 6 with L&#39;s and C&#39;s. . | Repeat step 5 with C&#39;s and D&#39;s. . | Add the number of unnecessary letters in the first line to unlet. . | Repeat steps 4-10 for every line of the file. . | Print a statement with the number of unnecessary letters, unlet, in the entire file. . | def roman_numerals(file): &quot;&quot;&quot; If the roman numerals input were reduced to the most efficient form, count the number of unecessary characters in the file. &quot;&quot;&quot; unlet = 0 def count_ones(string1, letter1_count, string2, count, line): &quot;&quot;&quot;Reduce letters with values that start with 5 into letters with values that start with 1.&quot;&quot;&quot; letter1 = line.count(string1) + letter1_count letter2 = int(letter1/2) if letter1 &gt; 1: count = count + int(letter1/2) return [letter2, count] def count_fives(string1, letter1_count, string2, count, line): &quot;&quot;&quot;Reduce letters with values that start with 1 into letters with values that start with 5.&quot;&quot;&quot; letter1 = line.count(string1) + letter1_count letter2 = int(letter1/5) if letter1 &gt; 4: count = count + 4*int(letter1/5) return [letter2, count] with open(file) as f: for line in f: I = [0, 0] V = count_fives(&#39;I&#39;, I[0], &#39;V&#39;, I[1], line) X = count_ones(&#39;V&#39;, V[0], &#39;X&#39;, V[1], line) L = count_fives(&#39;X&#39;, X[0], &#39;L&#39;, X[1], line) C = count_ones(&#39;L&#39;, L[0], &#39;C&#39;, L[1], line) D = count_fives(&#39;C&#39;, C[0], &#39;D&#39;, C[1], line) unlet = unlet + D[1] print(unlet, &quot;unnecessary characters were identified.&quot;) roman_numerals(&quot;roman.txt&quot;) .",
            "url": "https://smurphy567.github.io/BIOSTAT823/2021/08/31/hw1.html",
            "relUrl": "/2021/08/31/hw1.html",
            "date": " • Aug 31, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi there! . My name is Shannon, and I’m a first-year student in the Master of Biostatistics program at Duke Unvirsity. This blog houses my homework assignments and final project for my “Statistical Program for Big Data” course. Hope you enjoy learning and solving these problems with me! .",
          "url": "https://smurphy567.github.io/BIOSTAT823/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://smurphy567.github.io/BIOSTAT823/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}